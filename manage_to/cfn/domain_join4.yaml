AWSTemplateFormatVersion: "2010-09-09"
Description: Setup Manage from SSM documents
Parameters:
  ADDomain:
    Type: String
    Description: AD Domain
    Default: 'mspad.net'
  ADUser:
    Type: String
    Description: AD Domain User
    Default: 'rddeladmin'
  ADUserSecret:
    Type: String
    Description: AD Domain User Secret
    Default: 'rd/aduser/password'
  DomainIP:
    Type: String
    Description: Domain Server IP
Resources:
  SSMAutoRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - "ssm.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: '/'
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AmazonEC2FullAccess"
        - "arn:aws:iam::aws:policy/SecretsManagerReadWrite"
        - "arn:aws:iam::aws:policy/service-role/AmazonSSMAutomationRole"
  DomainJoinDocument:
    Type: AWS::SSM::Document
    Properties:
      DocumentType: Command
      Name: !Sub '${AWS::StackName}-DomainJoin'
      Content:
        schemaVersion: '2.2'
        description: 'Command Document to Domain Join Linux Instance'
        parameters:
          Domain:
            type: String
            description: "Domain Name"
            default: !Ref ADDomain
          DomainUser:
            type: String
            description: "Domain User Name"
            default: !Ref ADUser
          DomainUserSecret:
            type: String
            description: "Domain User Secret"
            default: !Ref ADUserSecret
        mainSteps:
          - action: "aws:runShellScript"
            name: "join_realm"
            inputs:
              runCommand:
                - "#!/bin/bash -xe"
                - "OS_ID=$(cat /etc/os-release | grep '^ID=' | cut -d'=' -f2 | sed -r 's#\"##g')"
                - "VER_ID=$(cat /etc/os-release | grep '^VERSION_ID=' | cut -d'=' -f2 | sed -r 's#\"##g')"
                - "if [ \"$OS_ID\" == \"rhel\" ]; then"
                - "echo \"realm join {{Domain}} -U {{DomainUser}}@{{Domain}}\" > /tmp/domain_join.sh"
                - "chmod +x /tmp/domain_join.sh"
                - "cat <<EOT >>/tmp/launch_domain_join.sh"
                - "#!/bin/expect -f"
                - "spawn /tmp/domain_join.sh"
                - "expect \"Password for {{DomainUser}}@{{Domain}}: \""
                - "send -- \"{{DomainUserSecret}}\""
                - "send -- \"\\r\""
                - "expect eof"
                - "EOT"
                - "chmod +x /tmp/launch_domain_join.sh"
                - "elif [ \"$OS_ID\" == \"sles\" ]; then"
                - "realm_name=\"{{Domain}}\""
                - "workgroup=$(echo ${realm_name^^} | cut -d'.' -f1)"
                - "dc1=$(echo ${realm_name} | cut -d\".\" -f1)"
                - "dc2=$(echo ${realm_name} | cut -d\".\" -f2)"
                - "mv /etc/krb5.conf /etc/krb5.conf.$(date '+%Y%m%d%H%M%S')"
                - "cat <<EOT >> /etc/krb5.conf"
                - "[libdefaults]"
                - "  dns_canonicalize_hostname = false"
                - "  rdns = false"
                - "  default_realm = ${realm_name^^}"
                - "  dns_lookup_realm = false"
                - "  forwardable = true"
                - "  default_ccache_name = FILE:/tmp/krb5cc_%{uid}"
                - "[realms]"
                - "  ${realm_name^^} = {"
                - "    admin_server = {{Domain}}"
                - "  }"
                - "[logging]"
                - "  kdc = FILE:/var/log/krb5/krb5kdc.log"
                - "  admin_server = FILE:/var/log/krb5/kadmind.log"
                - "  default = SYSLOG:NOTICE:DAEMON"
                - "[domain_realm]"
                - "  .{{Domain}} = ${realm_name^^}"
                - "  {{Domain}} = ${realm_name^^}"
                - "EOT"                
                - "mv /etc/samba/smb.conf /etc/samba/smb.conf.$(date '+%Y%m%d%H%M%S')"
                - "cat <<EOT >> /etc/samba/smb.conf"
                - "[global]"
                - "  workgroup = $workgroup"
                - "  kerberos method = secrets and keytab"
                - "  realm = ${realm_name^^}"
                - "  security = ADS"
                - "EOT"
                - "mv /etc/sssd/sssd.conf /etc/sssd/sssd.conf.$(date '+%Y%m%d%H%M%S')"
                - "cat <<EOT >> /etc/sssd/sssd.conf"
                - "[sssd]"
                - "  config_file_version = 2"
                - "  services = nss,pam"
                - "  domains = {{Domain}}"
                - "[nss]"
                - "  filter_groups = root"
                - "  filter_users = root"
                - "[pam]"
                - "  reconnection_retries = 3"
                - "[domain/{{Domain}}]"
                - "  ad_domain = {{Domain}}"
                - "  krb5_realm = ${realm_name^^}"
                - "  cache_credentials = true"
                - "  id_provider = ad"
                - "  auth_provider = ad"
                - "  krb5_store_password_if_offline = true"
                - "  default_shell = /bin/bash"
                - "  ldap_id_mapping = true"
                - "  use_fully_qualified_names = true"
                - "  fallback_homedir = /home/%u/%d"
                - "EOT"
                - "chmod  0600 /etc/sssd/sssd.conf"
                - "mv /etc/openldap/ldap.conf /etc/openldap/ldap.conf.$(date '+%Y%m%d%H%M%S')"
                - "cat <<EOT >> /etc/openldap/ldap.conf"
                - "URI ldap://{{Domain}}"
                - "BASE dc=${dc1},dc=${dc2}"
                - "REFERRALS OFF"
                - "EOT"
                - "cp /etc/nsswitch.conf /etc/nsswitch.conf.$(date '+%Y%m%d%H%M%S')"
                - "sed -i -e \"s~^passwd:.*~passwd: compat sss~g\" /etc/nsswitch.conf"
                - "sed -i -e \"s~^group:.*~group:  compat sss~g\" /etc/nsswitch.conf"
                - "systemctl enable sssd"
                - "pam-config -a --sss"
                - "pam-config -a --mkhomedir"
                - "cat <<EOT >> /tmp/krb_session.sh"
                - "#!/bin/bash"
                - "kinit {{DomainUser}}"
                - "EOT"
                - "chmod +x /tmp/krb_session.sh"
                - "cat <<EOT >> /tmp/domain_join.sh"
                - "#!/bin/bash"
                - "net ads join -U {{DomainUser}}@${realm_name^^}"
                - "EOT"
                - "chmod +x /tmp/domain_join.sh"
                - "cat <<EOT >> /tmp/launch_krb_session.sh"
                - "#!/usr/bin/expect -f"
                - "spawn /tmp/krb_session.sh"
                - "expect \"Password for {{DomainUser}}@${realm_name^^}: \""
                - "send -- \"{{DomainUserSecret}}\""
                - "send -- \"\\r\""
                - "expect eof"
                - "EOT"
                - "chmod +x /tmp/launch_krb_session.sh"
                - "cat <<EOT >> /tmp/launch_domain_join.sh"
                - "#!/usr/bin/expect -f"
                - "spawn /tmp/domain_join.sh"
                - "expect \"Enter {{DomainUser}}@${realm_name^^}'s password:\""
                - "send -- \"{{DomainUserSecret}}\""
                - "send -- \"\\r\""
                - "expect eof"
                - "EOT"
                - "chmod +x /tmp/launch_domain_join.sh"
                - "elif [ \"$OS_ID\" == \"ubuntu\" ]; then"
                - "mv /etc/krb5.conf /etc/krb5.conf.$(date '+%Y%m%d%H%M%S')"
                - "cat <<EOT >> /etc/krb5.conf"
                - "[logging]"
                - "  default = FILE:/var/log/krb5libs.log"
                - "  kdc = FILE:/var/log/krb5kdc.log"
                - "  admin_server = FILE:/var/log/kadmind.log"
                - "[libdefaults]"
                - "  dns_lookup_realm = false"
                - "  dns_lookup_kdc = false"
                - "  rdns = false"
                - "  forwardable = true"
                - "  ${realm_name^^} = {"
                - "    admin_server = {{Domain}}"
                - "  }"
                - "[domain_realm]"
                - "  .{{Domain}} = ${realm_name^^}"
                - "  {{Domain}} = ${realm_name^^}"
                - "EOT"
                - "cat <<EOT >> /etc/realmd.conf"
                - "[users]"
                - "default-home = /home/%D/%U"
                - "default-shell = /bin/bash"
                - "[active-directory]"
                - "default-client = sssd"
                - "os-name = Ubuntu Linux"
                - "os-version = ${VER_ID}"
                - "[service]"
                - "automatic-install = no"
                - "[{{Domain}}]"
                - "fully-qualified-names = no"
                - "automatic-id-mapping = yes"
                - "user-principal = yes"
                - "manage-system = no"
                - "EOT"
                - "cat <<EOT >> /tmp/krb_session.sh"
                - "#!/bin/bash"
                - "kinit {{DomainUser}}@${realm_name^^}"
                - "EOT"
                - "chmod +x /tmp/krb_session.sh"
                - "cat <<EOT >> /tmp/launch_krb_session.sh"
                - "#!/usr/bin/expect -f"
                - "spawn /tmp/krb_session.sh"
                - "expect \"Password for {{DomainUser}}@${realm_name^^}: \""
                - "send -- \"{{DomainUserSecret}}\""
                - "send -- \"\\r\""
                - "expect eof"
                - "EOT"
                - "chmod +x /tmp/launch_krb_session.sh"
                - "cat <<EOT >> /tmp/domain_join.sh"
                - "#!/bin/bash"
                - "realm join -U {{DomainUser}}@${realm_name^^} {{Domain}}"
                - "EOT"
                - "chmod +x /tmp/domain_join.sh"
                - "cat <<EOT >> /tmp/launch_domain_join.sh"
                - "#!/usr/bin/expect -f"
                - "expect \"Password for {{DomainUser}}@${realm_name^^}: \""
                - "send -- \"{{DomainUserSecret}}\""
                - "send -- \"\\r\""
                - "expect eof"
                - "EOT"
                - "chmod +x /tmp/launch_domain_join.sh"
                - "mv /etc/sssd/sssd.conf /etc/sssd/sssd.conf.$(date '+%Y%m%d%H%M%S')"
                - "cat <<EOT >> /etc/sssd/sssd.conf"
                - "[sssd]"
                - "domains = {{Domain}}"
                - "config_file_version = 2"
                - "services = nss, pam"
                - "[domain/{{Domain}}]"
                - "ad_domain = {{Domain}}"
                - "krb5_realm = ${realm_name^^}"
                - "realmd_tags = manages-system joined-with-adcli"
                - "cache_credentials = True"
                - "id_provider = ad"
                - "krb5_store_password_if_offline = True"
                - "default_shell = /bin/bash"
                - "ldap_id_mapping = True"
                - "use_fully_qualified_names = False"
                - "fallback_homedir = /home/%d/%u"
                - "simple_allow_users = $"
                - "access_provider = ad"
                - "EOT"
                - "systemctl restart sssd"
                - "export DEBIAN_FRONTEND=noninteractive"
                - "pam-auth-update --enable mkhomedir --force"
                - "fi"
          - action: "aws:runShellScript"
            name: "add_sudoer"
            precondition:
              StringEquals:
                - platformType
                - Linux
            inputs:
              runCommand:
                - "#!/bin/bash -xe"
                - "realm_name=\"{{Domain}}\""
                - "touch /etc/sudoers.d/ad-users"
                - "OS_ID=$(cat /etc/os-release | grep '^ID=' | cut -d'=' -f2 | sed -r 's#\"##g')"
                - "if [ \"$OS_ID\" == \"rhel\" ]; then"
                - "echo \"{{DomainUser}}@${realm_name^^}  ALL=(ALL)  NOPASSWD:ALL\" > /etc/sudoers.d/ad-users"
                - elif [ \"$OS_ID\" == \"sles\" ]; then"
                - "echo \"{{DomainUser}}@${realm_name^^}  ALL=(ALL)  NOPASSWD:ALL\" > /etc/sudoers.d/ad-users"
                - elif [ \"$OS_ID\" == \"ubuntu\" ]; then"
                - "echo \"{{DomainUser}}  ALL=(ALL)  NOPASSWD:ALL\" > /etc/sudoers.d/ad-users"
                - fi
          - action: "aws:runShellScript"
            name: "run_join_realm"
            inputs:
              runCommand:
                - "#!/bin/bash -xe"
                - "/tmp/launch_krb_session.sh"
                - "/tmp/launch_domain_join.sh"
          - action: "aws:runShellScript"
            name: "delete_files"
            inputs:
              runCommand:
                - "#!/bin/bash -xe"
                - "rm -f /tmp/launch_domain_join.sh /tmp/domain_join.sh /tmp/launch_krb_session.sh /tmp/krb_session.sh"
  DomainJoinPrereqsDocument:
    Type: AWS::SSM::Document
    Properties:
      DocumentType: Command
      Name: !Sub '${AWS::StackName}-DomainJoinPrereqs'
      Content:
        schemaVersion: '2.2'
        description: 'Command Document to Install Domain Join pre-reqs'
        parameters:
          DNSIP:
            type: "String"
            description: "DNS IP address"
            default: !Ref DomainIP
        mainSteps:
          - action: "aws:runShellScript"
            name: "setup_pkgs"
            precondition:
              StringEquals:
                - platformType
                - Linux
            inputs:
              runCommand:
                - "#!/bin/bash -xe"
                - "OS_ID=$(cat /etc/os-release | grep '^ID=' | cut -d'=' -f2 | sed -r 's#\"##g')"
                - "if [ \"$OS_ID\" == \"rhel\" ]; then"
                - "  yum -y update"
                - "  yum -y install sssd realmd krb5-workstation samba-common-tools expect unzip"
                - "  touch /etc/dhcp/dhclient.conf"
                - "  echo \"supersede domain-name-servers {{DNSIP}};\" >> /etc/dhcp/dhclient.conf"
                - "  echo \"PEERDNS=yes\" >> /etc/sysconfig/network-scripts/ifcfg-eth0"
                - "elif [ \"$OS_ID\" == \"sles\" ]; then"
                - "  zypper ref"
                - "  zypper -n install krb5-client samba-client openldap2-client sssd sssd-tools sssd-ad expect unzip"
                - "  cp /etc/sysconfig/network/config /etc/sysconfig/network/config.$(date '+%Y%m%d%H%M%S')"
                - "  sed -i -e \"s~^NETCONFIG_DNS_STATIC_SERVERS=.*~NETCONFIG_DNS_STATIC_SERVERS=\\\"{{DNSIP}}\\\"~g\" /etc/sysconfig/network/config"
                - "elif [ \"$OS_ID\" == \"ubuntu\" ]; then"
                - "apt update -y"
                - "apt upgrade -y"
                - "apt -y install realmd libnss-sss libpam-sss sssd sssd-tools adcli samba-common-bin oddjob oddjob-mkhomedir packagekit"
                - "export DEBIAN_FRONTEND=noninteractive"
                - "apt -y install krb5-user"
                - "apt -y install python3 python3-pip"
                - "python3 -m pip install --upgrade pip"
                - "cat <<EOT >> /tmp/update_dns.py"
                - "import os"
                - "import sys"
                - "import yaml"
                - "def update_netplan_config(config_file, dnsip):"
                - "  config = { \"network\": { \"ethernets\": { \"eth0\": { \"nameservers\": { \"addresses\": [ dnsip ] }}}}}"
                - "  with open(config_file, \"w\") as c_file:"
                - "    yaml.dump(config, c_file)"
                - "  c_file.close()"
                - "def main():"
                - "  config_file = sys.argv[1]"
                - "  dnsip = sys.argv[2]"
                - "  update_netplan_config(config_file, dnsip)"
                - "if __name__ == \"__main__\":"
                - "  main()"
                - "EOT"
                - "python3 /tmp/update_dns.py /etc/netplan/51-ad-dns.yaml {{DNSIP}}"
                - "echo \"{{DNSIP}  mspad.net\" >> /etc/hosts"
                - "fi"
          - action: "aws:runShellScript"
            name: "update_ssh_config"
            precondition:
              StringEquals:
                - platformType
                - Linux
            inputs:
              runCommand:
                - "#!/bin/bash -xe"
                - "sed -i -e \"s~PasswordAuthentication no~PasswordAuthentication yes~g\" /etc/ssh/sshd_config"
          - action: "aws:runShellScript"
            name: "install_aws_cli_v2"
            precondition:
              StringEquals:
                - platformType
                - Linux
            inputs:
              runCommand:
                - "#!/bin/bash -xe"
                - "OS_ID=$(cat /etc/os-release | grep '^ID=' | cut -d'=' -f2 | sed -r 's#\"##g')"
                - "if [ \"$OS_ID\" == \"rhel\" ]; then"
                - "  curl \"https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip\" -o \"awscliv2.zip\""
                - "  unzip awscliv2.zip"
                - "  sudo ./aws/install"
                - "fi"
  JoinRHELToDomainDocument:
    Type: AWS::SSM::Document
    DependsOn:
      - SSMAutoRole
      - DomainJoinRHELDocument
      - DomainJoinPrereqsDocument
    Properties:
      DocumentType: Automation
      Name: !Sub '${AWS::StackName}-JoinRHELToDomain'
      Content:
        schemaVersion: '0.3'
        description: 'Automation Document to Setup Domain Join'
        assumeRole: !GetAtt [ SSMAutoRole, Arn ]
        parameters:
          ADUser:
            type: String
            default: !Ref ADUser
            description: AD Domain User
          ADUserPwd:
            type: String
            default: !Ref ADUserSecret
            description: AD Domain User Password
          ADDomain:
            type: String
            default: !Ref ADDomain
            description: AD Domain Name
          DNSIP:
            type: String
            description: DNS server address
          InstanceId:
            type: 'AWS::EC2::Instance::Id'
            description: EC2 Instance
        mainSteps:
          - name: SetupPrereqs
            action: 'aws:runCommand'
            description: Setup Prereqs
            inputs:
              DocumentName: !Ref DomainJoinPrereqsDocument
              InstanceIds:
                - '{{InstanceId}}'
              Parameters:
                DNSIP: '{{ DNSIP }}'
          - name: RebootInstance
            action: 'aws:executeAwsApi'
            description: Reboot Instance
            inputs:
              Service: ec2
              Api: RebootInstances
              InstanceIds:
                - '{{InstanceId}}'            
          - name: Sleep5Min
            action: 'aws:sleep'
            description: Sleep for 5 Min
            inputs:
              Duration: PT5M
          - name: WaitForInstanceRunning
            action: 'aws:changeInstanceState'
            description: Assert Instance is Running
            timeoutSeconds: 600
            inputs:
              InstanceIds:
                - '{{InstanceId}}'
              DesiredState: running
              CheckStateOnly: true
          - name: GetADPassword
            action: 'aws:executeAwsApi'
            description: Get AD User Password
            inputs:
              Service: secretsmanager
              Api: GetSecretValue
              SecretId: '{{ADUserPwd}}'
            outputs:
              - Name: ADSecret
                Selector: $.SecretString
                Type: String
          - name: DomainJoinRHEL
            action: 'aws:runCommand'
            description: Run DomainJoinRHEL Command
            inputs:
              DocumentName: !Ref DomainJoinRHELDocument
              InstanceIds:
                - '{{InstanceId}}'
              Parameters:
                Domain: '{{ADDomain}}'
                DomainUser: '{{ADUser}}'
                DomainUserSecret: '{{GetADPassword.ADSecret}}'
          - name: AllowServices5Min
            action: 'aws:sleep'
            description: Sleep for 5 Min
            inputs:
              Duration: PT5M
          - name: PostConfigReboot
            action: 'aws:executeAwsApi'
            description: Reboot Instance
            inputs:
              Service: ec2
              Api: RebootInstances
              InstanceIds:
                - '{{InstanceId}}'              